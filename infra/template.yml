AWSTemplateFormatVersion: 2010-09-09
Description: Create UserPool and Identitiy Pool
Parameters:
  NameTagKey:
    Type: String
    Default: Name

  NameTagValue:
    Type: String
    Default: cognitoS3

  S3BucketName:
    Type: String
    Default: cognito-s3-000

  UserNamePrefix:
    Type: String
    Default: cognitoS3-UserPool-Group

Resources:
  # cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref NameTagValue
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject: Verified by code
      EmailVerificationMessage: Your verification code is {####}
      LambdaConfig:
        PreSignUp: !GetAtt PreSignedLambda.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      PreventUserExistenceErrors: ENABLED
      ClientName: !Ref NameTagValue
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: !Ref NameTagValue
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Join
            - ''
            - - cognito-idp.
              - !Ref 'AWS::Region'
              - .amazonaws.com/
              - !Ref UserPool

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref NameTagValue
          - '-'
          - Unauthenticated
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Path: /
      Policies:
        - PolicyName: !Join
            - ''
            - - Unauthenticated-
              - !Ref NameTagValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - !Ref NameTagValue
          - '-'
          - Authenticated
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Path: /
      Policies:
        - PolicyName: !Join
            - ''
            - - Authenticated-
              - !Ref NameTagValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthenticatedRole.Arn
        authenticated: !GetAtt AuthenticatedRole.Arn

  AdminUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ''
        - - 'Admin_'
          - !Ref UserNamePrefix
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  # S3 Bucket
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [POST, GET, PUT, DELETE, HEAD]
            AllowedHeaders: ['*']
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Bucket
            Principal:
              AWS: !GetAtt AdminUserRole.Arn

  CognitoS3LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CognitoS3LambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CognitoS3LambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:DeleteRole"
                  - "iam:DeletePolicy"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:GetRole"
                  - "iam:ListPolicies"
                  - "iam:ListRoles"
                  - "cognito-idp:CreateGroup"
                  - "cognito-idp:AdminAddUserToGroup"
                  - "s3:PutObject"
                  - "s3:PutBucketPolicy"
                  - "s3:GetBucketPolicy"
                  - "lambda:UpdateFunctionConfiguration"
                  - "logs:*"
                  - "kms:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  PreSignedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import traceback
          import boto3
          import os
          import time
          from botocore.exceptions import ClientError
          def handler(event, context):
            try:
              USER_POOL_ID = os.environ.get('USER_POOL_ID')
              APP_CLIENT_ID = os.environ.get('APP_CLIENT_ID')
              ID_PROVIDER_ID = os.environ.get('ID_PROVIDER_ID')
              USER_NAME = event['request']['userAttributes']['email']
              BUCKET_NAME = os.environ.get('BUCKET_NAME')
              PREFIX = os.environ.get('PREFIX')
              def create_s3_folder():
                try:
                  path = USER_NAME + '/'
                  s3 = boto3.client('s3')
                  s3.put_object(Bucket=BUCKET_NAME, Key=path)
                  return 'arn:aws:s3:::' + BUCKET_NAME + '/' + path + '*'
                except ClientError:
                  pass

              def create_iam_role():
                try:
                  policy = {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject",
                          "s3:List*",
                          "s3:PutObject",
                          "s3:DeleteObject"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }      

                  trust = {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Principal": {
                          "Federated": "cognito-identity.amazonaws.com"
                        },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                          "StringEquals": {
                            "cognito-identity.amazonaws.com:aud": ""
                          },
                          "ForAnyValue:StringLike": {
                            "cognito-identity.amazonaws.com:amr": "authenticated"
                          }
                        }
                      }
                    ]
                  }

                  trust['Statement'][0]['Condition']['StringEquals']['cognito-identity.amazonaws.com:aud'] = ID_PROVIDER_ID
                  policy = json.dumps(policy)
                  trust = json.dumps(trust)

                  iam = boto3.client('iam')
                  policy_arn = iam.create_policy(
                    PolicyName = USER_NAME + '_' + PREFIX,
                    PolicyDocument = policy
                  )['Policy']['Arn']

                  role_arn = iam.create_role(
                    RoleName = USER_NAME + '_' + PREFIX,
                    AssumeRolePolicyDocument = trust,
                  )['Role']['Arn']

                  time.sleep(5)
                  
                  iam.attach_role_policy(
                    RoleName = USER_NAME + '_' + PREFIX,
                    PolicyArn = policy_arn
                  )

                  return role_arn
                except ClientError:
                  pass

              def create_group(iam_role_arn):
                try:
                  cognito = boto3.client('cognito-idp')
                  response = cognito.create_group(
                    GroupName = USER_NAME,
                    UserPoolId = USER_POOL_ID,
                    RoleArn = iam_role_arn
                  )
                except ClientError:
                  pass

              def add_user_to_group():
                try:
                  cognito = boto3.client('cognito-idp')
                  response = cognito.admin_add_user_to_group(
                    UserPoolId = USER_POOL_ID,
                    Username = USER_NAME,
                    GroupName = USER_NAME
                  )
                except ClientError:
                  pass

              def modify_bucket_policy(bucket_key_arn):
                try:
                  s3 = boto3.client('s3')
                  iam = boto3.client('iam')
                  policy = json.loads(s3.get_bucket_policy(Bucket=BUCKET_NAME)['Policy'])
                  role_arn = iam.get_role(RoleName=(USER_NAME + '_' + PREFIX))['Role']['Arn']
                  added_policy = {
                    'Effect': 'Allow',
                    'Principal': role_arn,
                    'Action': [
                      's3:GetObject',
                      's3:List*',
                      's3:PutObject',
                      's3:DeleteObject'
                    ],
                    'Resource': bucket_key_arn
                  }
                  policy['Statement'].append(added_policy)
                  s3.put_bucket_policy(
                    Bucket = BUCKET_NAME,
                    Policy = json.dumps(policy)
                  )
                except ClientError:
                  pass
              bucket_key_arn = create_s3_folder()
              iam_role_arn = create_iam_role()
              create_group(iam_role_arn)
              add_user_to_group()
              modify_bucket_policy(bucket_key_arn)
            except ClientError:
              traceback.print_exc()
            except:
              traceback.print_exc()
      Runtime: python3.8
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoS3LambdaRole.Arn
      FunctionName: PreSignedLambda
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  SetupLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import traceback
          import cfnresponse
          import boto3
          import os
          from botocore.exceptions import ClientError
          def handler(event, context):
            response = {}
            try:
              if event['RequestType'] == 'Delete':
                PREFIX = os.environ.get('PREFIX')
                def delete_iam():
                  try:
                    iam = boto3.client('iam')
                    for role in iam.list_roles()['Roles']:
                      if PREFIX in role['RoleName']:
                        for policy in iam.list_policies()['Policies']:
                          if role['RoleName'] == policy['PolicyName']:
                            iam.detach_role_policy(RoleName=role['RoleName'], PolicyArn=policy['Arn'])
                            time.sleep(3)
                            iam.delete_policy(PolicyArn=policy['Arn'])
                            iam.delete_role(RoleName=role['RoleName'])
                  except ClientError:
                    pass

                def delete_s3_objects():
                  try:
                    s3 = boto3.resource('s3')
                    bucket = s3.Bucket(BUCKET_NAME)
                    bucket.objects.all().delete()
                  except ClientError:
                    pass
                
                delete_iam()
                delete_s3_objects()        
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              else:
                client = boto3.client('lambda')
                response['Response'] = client.update_function_configuration(
                  FunctionName = event['ResourceProperties']['TargetLambdaArn'],
                  Environment = {
                    'Variables': {
                      'USER_POOL_ID': event['ResourceProperties']['USER_POOL_ID'],
                      'APP_CLIENT_ID': event['ResourceProperties']['APP_CLIENT_ID'],
                      'ID_PROVIDER_ID': event['ResourceProperties']['ID_PROVIDER_ID'],
                      'BUCKET_NAME': event['ResourceProperties']['BUCKET_NAME'],
                      'PREFIX': event['ResourceProperties']['PREFIX']
                    }
                  }
                )
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              return
            except ClientError:
              response['Exception'] = traceback.format_exc()
              cfnresponse.send(event, context, cfnresponse.FAILED, response)
              return
            except:
              response['Exception'] = traceback.format_exc()
              cfnresponse.send(event, context, cfnresponse.FAILED, response)
              return
      Runtime: python2.7
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt CognitoS3LambdaRole.Arn
      FunctionName: SetupLambda
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  PreSignedLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PreSignedLambda.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  DoSetup:
    Type: Custom::DoSetup
    Properties:
      ServiceToken: !GetAtt SetupLambda.Arn
      TargetLambdaArn: !GetAtt PreSignedLambda.Arn
      USER_POOL_ID: !Ref UserPool
      APP_CLIENT_ID: !Ref UserPoolClient
      ID_PROVIDER_ID: !Ref IdentityPool
      BUCKET_NAME: !Ref Bucket
      PREFIX: !Ref UserNamePrefix
