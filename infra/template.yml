AWSTemplateFormatVersion: 2010-09-09
Description: Create UserPool and Identitiy Pool
Parameters:
  NameTagKey:
    Type: String
    Default: Name

  NameTagValue:
    Type: String
    Default: cognitoS3

  S3BucketName:
    Type: String
    Default: cognito-s3-000

  NamePrefix:
    Type: String
    Default: cognitoS3-UserPool-Group

Resources:
  SignUpLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SignUpLambdaRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SignUpLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "iam:CreateRole"
                  - "iam:CreatePolicy"
                  - "iam:DeleteRole"
                  - "iam:DeletePolicy"
                  - "iam:AttachRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:GetRole"
                  - "iam:ListPolicies"
                  - "iam:ListRoles"
                  - "cognito-idp:CreateGroup"
                  - "cognito-idp:AdminAddUserToGroup"
                  - "s3:PutObject"
                  - "s3:PutBucketPolicy"
                  - "s3:GetBucketPolicy"
                  - "logs:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  SignUpLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import traceback
          import cfnresponse
          import boto3
          def handler(event, context):
            response = {}
            try:
              if event['RequestType'] == "Delete":
                response['event'] = event
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
              else:
                response['event'] = event
                response['environment'] = APP_CLIENT_ID
                response['environment'] = USER_POOL_ID
                cfnresponse.send(event, context, cfnresponse.SUCCESS, response)
            except:
              cfnresponse.send(event, context, cfnresponse.FAILED, response)
              return
      Runtime: python2.7
      Timeout: 900
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt SignUpLambdaRole.Arn
      FunctionName: SignUpLambda
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APP_CLIENT_ID: !Ref UserPoolClient
          ID_PROVIDER_ID: !Ref IdentityPool
          BUCKET_NAME: !Ref Bucket
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  DeleteEnvironment:
    Type: Custom::DeleteEnvironment
    Properties:
      ServiceToken: !GetAtt SignUpLambda.Arn

  # cognito
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref NameTagValue
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationSubject: Verified by code
      EmailVerificationMessage: Your verification code is {####}
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      PreventUserExistenceErrors: ENABLED
      ClientName: !Ref NameTagValue
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      IdentityPoolName: !Ref NameTagValue
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !Join
            - ""
            - - cognito-idp.
              - !Ref 'AWS::Region'
              - .amazonaws.com/
              - !Ref UserPool

  UnauthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ""
        - - !Ref NameTagValue
          - '-'
          - Unauthenticated
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: sts:AssumeRoleWithWebIdentity
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Path: /
      Policies:
        - PolicyName: !Join
            - ""
            - - Unauthenticated-
              - !Ref NameTagValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  AuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ""
        - - !Ref NameTagValue
          - '-'
          - Authenticated
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Path: /
      Policies:
        - PolicyName: !Join
            - ""
            - - Authenticated-
              - !Ref NameTagValue
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource:
                  - "*"
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        unauthenticated: !GetAtt UnauthenticatedRole.Arn
        authenticated: !GetAtt AuthenticatedRole.Arn

  AdminUserRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join
        - ""
        - - 'Admin_'
          - !Ref NamePrefix
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Principal:
              Federated: cognito-identity.amazonaws.com
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              ForAnyValue:StringLike:
                "cognito-identity.amazonaws.com:amr": authenticated
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  # S3 Bucket
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [POST, GET, PUT, DELETE, HEAD]
            AllowedHeaders: ['*']
      Tags:
        - Key: !Ref NameTagKey
          Value: !Ref NameTagValue

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref Bucket
            Principal:
              AWS: !GetAtt AdminUserRole.Arn
